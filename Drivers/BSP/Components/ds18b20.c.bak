/**
  ******************************************************************************
  * @file       :
  * @author     :
  * @version    :
  * @date       :
  * @brief      :
  ******************************************************************************
    @history

  ******************************************************************************
*/

#include "include.h"


/**
 * @brief : 初始化DS18B20的IO口 DQ 同时检测DS的存在
 * @note  :
 * @param :
 * @param :
 * @param :
 * @return:返回1:不存在,返回0:存在
 */
uint8_t DS18B20_Init(void)
{
    GPIO_InitTypeDef GPIO_Initure;
    ONE_WIRE_GPIO_CLK_ENABLE();			//使能GPIO时钟

    GPIO_Initure.Pin   = ONE_WIRE_PIN;
    GPIO_Initure.Mode  = GPIO_MODE_OUTPUT_OD;      //开漏模式输出
    GPIO_Initure.Pull  = GPIO_PULLUP;              //
    GPIO_Initure.Speed = GPIO_SPEED_HIGH;       //
    HAL_GPIO_Init(ONE_WIRE_PORT, &GPIO_Initure); //初始化

    /*
    DS18B20_Rst();
    return DS18B20_Check();*/

    DS18B20_Rst();
    DS18B20_Write_Byte(SkipROM);
    DS18B20_Write_Byte(WriteScratchpad);
    DS18B20_Write_Byte(DS_AlarmTL);
    DS18B20_Write_Byte(DS_AlarmTH);
    DS18B20_Write_Byte(DS_PRECISION);

    DS18B20_Rst();
    DS18B20_Write_Byte(SkipROM);
    DS18B20_Write_Byte(CopyScratchpad);
 
    while(!ONE_WIRE_READ());
}

void DS18B20StartConvert(void)
{
    DS18B20_Rst();
    DS18B20_Write_Byte(SkipROM);
    DS18B20_Write_Byte(StartConvert);
}

/**
 * @brief : 复位DS18B20
 * @note  :
 * @param :
 * @param :
 * @param :
 * @return:
 */
void DS18B20_Rst(void)
{
    /*ONE_WIRE_OUT(0);  //拉低DQ
    Delay_us(750);      //拉低750us
    ONE_WIRE_OUT(1);  //DQ=1 
    Delay_us(15);       //15us
    */

    unsigned char resport;
    ONE_WIRE_OUT(1);
    Delay_us(50);

    ONE_WIRE_OUT(0);
    Delay_us(500);  //500us (该时间的时间范围可以从480到960微秒)
    ONE_WIRE_OUT(1);
    Delay_us(40);  //40us
    //resport = ONE_WIRE_READ();
    while(ONE_WIRE_READ());
    Delay_us(500);  //500us
    ONE_WIRE_OUT(1);
    return resport;
}

/**
 * @brief : 等待DS18B20的回应
 * @note  :
 * @param :
 * @param :
 * @param :
 * @return:返回1:未检测到DS18B20的存在,返回0:存在
 */
uint8_t DS18B20_Check(void)
{
    uint8_t ucRetryTime = 0;

    while(ONE_WIRE_READ() && ucRetryTime < 200)
    {
        ucRetryTime++;
        Delay_us(1);
    }

    if(ucRetryTime >= 200)
    {
        return 1;
    }
    else
    {
        ucRetryTime = 0;
    }

    while(!ONE_WIRE_READ() && ucRetryTime < 240)
    {
        ucRetryTime++;
        Delay_us(1);
    }

    if(ucRetryTime >= 240)
    {
        return 1;
    }

    return 0;
}

/**
 * @brief : 从DS18B20读取一个位
 * @note  :
 * @param :
 * @param :
 * @param :
 * @return:返回值：ucData:1/0
 */
uint8_t DS18B20_Read_Bit(void)
{
    uint8_t ucData;
    
    ONE_WIRE_OUT(0);
    Delay_us(2);
    ONE_WIRE_OUT(1);
    Delay_us(12);
    if(ONE_WIRE_READ())
    {
        ucData = 1;
    }
    else
    {
        ucData = 0;
    }
    Delay_us(50);
    return ucData;
}

/**
 * @brief : 从DS18B20读取一个字节
 * @note  :
 * @param :
 * @param :
 * @param :
 * @return:返回值：读到的数据
 */
uint8_t DS18B20_Read_Byte(void)
{
    uint8_t i, j, ucData;

    ucData = 0;
    for(i = 1; i <= 8; i++)
    {
        j = DS18B20_Read_Bit();
        ucData = (j << 7) | (ucData >> 1);
    }
    return ucData;
}

/**
 * @brief : 写一个字节到DS18B20
 * @note  :
 * @param :ucData：要写入的字节
 * @param :
 * @param :
 * @return:返回值：读到的数据
 */
void DS18B20_Write_Byte(uint8_t ucData)
{
    uint8_t j;
    uint8_t ucTemp;

    for(j = 1; j <= 8; j++)
    {
        ucTemp = ucData & 0x01;
        ucData = ucData >> 1;
        if(ucTemp)       // 写1
        {
            ONE_WIRE_OUT(0);
            Delay_us(2);
            ONE_WIRE_OUT(1);
            Delay_us(60);
        }
        else            //写0
        {
            ONE_WIRE_OUT(0);
            Delay_us(60);
            ONE_WIRE_OUT(1);
            Delay_us(2);
        }
    }
}

/** 
 * @brief : 开始温度转换
 * @note  :
 * @param : 
 * @param : 
 * @param : 
 * @return:
 */
void DS18B20_Start(void)
{
    DS18B20_Rst();
    DS18B20_Check();
    DS18B20_Write_Byte(0xcc);// skip rom
    DS18B20_Write_Byte(0x44);// convert
}

/** 
 * @brief : 
 * @note  :
 * @param : 
 * @param : 
 * @param : 
 * @return:
 */
void ReadRom(unsigned char *Read_Addr)
{
    unsigned char i;

    DS18B20_Write_Byte(ReadROM);

    for(i = 8; i > 0; i--)
    {
        *Read_Addr = DS18B20_Read_Byte();
        Read_Addr++;
    }
}



//----------------------------------------------------------------------